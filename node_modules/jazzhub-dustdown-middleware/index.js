/*
 * Tacks the markdown representation of a requested file to req.rendered_markdown
 * as long as a corresponding markdown file appears in the path, path.
 */


'use strict';

var _ = require('underscore'),
    dust = require('dustjs-linkedin'),
    path = require('path'),
    fs = require('fs');
dust.optimizers.format = function(ctx, node) { return node; }; // replace with dust.config.whitespace once dustjs-linkedin >= 2.5.0

var compileFragments = function(dir) {
    var compiled = [];
    _.each(fs.readdirSync(dir), function(f) {
        if (path.extname(f) !== '.md') {
            return;
        }
        var stem = path.basename(f, '.md');
        var mdString = fs.readFileSync(path.join(dir, f), {
            encoding: 'utf8'
        });
        compiled.push(dust.compile(mdString, path.basename(dir) + '/' + stem));
    });
    return compiled;
};

var evaluateDustSyntax = function(doc_path, markdown_path, callback) {
    fs.readFile(markdown_path, 'utf8', function(err, data) {
        if (err) {
            callback(err); return;
        }
        var dustTemplateName = path.basename(doc_path) + '/' + path.basename(markdown_path, '.md');
        dust.loadSource(dust.compile(data, dustTemplateName));
        dust.render(dustTemplateName, {}, callback);
    });
};

module.exports = function(doc_path, fragments_dir) {
    _.each(compileFragments(fragments_dir), function(fragment) {
        dust.loadSource(fragment);
    });
    return function(req, res, next) {
        var req_path = req.path;

        if (req_path.match(/\.md$/)) {
            req_path = req_path.replace(/\.md$/, '');
        }

        var markdown_path = path.join(doc_path, req_path) + '.md';

        evaluateDustSyntax(doc_path, markdown_path, function(err, content) {
            if (err)
                return next();

            req.dusted_markdown = content;
            return next();
        });
    };

    // directory: function(req, res, next) {

    //     var markdown_path = path.join(doc_path, req.path, 'index.md');

    //     compileMarkdown(markdown_path, function(err, content) {
    //         if (err)
    //             return next();

    //         req.rendered_markdown = content;
    //         return next();
    //     });
    // }
};
